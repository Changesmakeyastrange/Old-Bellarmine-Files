TITLE Summing the Gaps between Array Values      (SummingGaps.asm)

; Carson Blevins
; Chapter 4 Problems
; #3

INCLUDE Irvine32.inc
.data
arrayD DWORD  3,6,8,12,19
sum DWORD 0

.code
main PROC

	mov ecx,4
L1:
	mov eax,[arrayD+(ecx*4)]
	sub eax,[arrayD+((ecx*4)-4)]
	add sum,eax
	dec ecx
	JNZ L1

	mov eax,sum
	call WriteString
	call WriteDec
	exit
main ENDP
END main





TITLE Copying a Word Array to a DoubleWord array     (Copying.asm)

; Carson Blevins
; Chapter 4 Problems
; #4

INCLUDE Irvine32.inc
.data
arrayW WORD  3,6,8,12,19
arrayD DWORD SIZEOF arraW DUP (?)

.code
main PROC

	mov ecx,-1
	mov ebx,4
L1:
	inc ecx
	movsx eax,[arrayW+(ecx*2)]
	mov [arrayD+((ecx*4))],eax
	cmp ecx,ebx
    JNE  L1

	mov ecx,-1
	mov ebx,4
L2:
	inc ecx
	mov eax,[arrayD+((ecx*4))]
	call WriteString
	call WriteDec
	cmp ecx,ebx
	JNE L2
	exit
main ENDP
END main





TITLE Fibonacci Numbers     (Fibonacci.asm)

; Carson Blevins
; Chapter 4 Problems
; #5

INCLUDE Irvine32.inc
.data
	Fib1 DWORD 1
	Fib2 DWORD 1

.code
main PROC

	mov eax,Fib1
	mov ecx,9
L1:
	mov eax,Fib1
	call WriteString
	call WriteDec
	mov eax,Fib1
	add eax,Fib2
	XCHG Fib2,eax
	mov Fib1,eax
	dec ecx
	JNZ L1

	exit
main ENDP
END main




TITLE Reverse an Array     (Reverse.asm)

; Carson Blevins
; Chapter 4 Problems
; #6

INCLUDE Irvine32.inc
.data
array DWORD  1,3,8,9,22

.code
main PROC

	
	mov ecx,-1
	mov ebx,LENGTHOF array
L1:
	inc ecx
	mov eax,[array+(ebx*(TYPE array))]
	XCHG eax,[array+(ecx*(TYPE array))]
	XCHG [array+(ebx*(TYPE array))],eax
	dec ebx
	cmp ecx,ebx
	JNAE L1


	mov ecx,0
	mov ebx,LENGTHOF array
L2:
	inc ecx
	mov eax,[array+(ecx*(TYPE array))]
	call WriteString
	call WriteDec
	cmp ecx,ebx
	JNAE L2
	exit
main ENDP
END main





TITLE Copy a String in Reverse Order     (String.asm)

; Carson Blevins
; Chapter 4 Problems
; #7

INCLUDE Irvine32.inc
.data
	source BYTE "This is the source string",0
	target BYTE SIZEOF source DUP ('#')

.code
main PROC
	mov ecx,SIZEOF source-1
	mov edi,OFFSET target
L1:
	mov al, BYTE PTR [source+ecx-1]
	stosb
loop L1
	mov BYTE PTR[edi],0
	mov edx,OFFSET target
	call WriteString
	exit
main ENDP
END main






TITLE Shifting the Elements in an Array    (Shifting.asm)

; Carson Blevins
; Chapter 4 Problems
; #8

INCLUDE Irvine32.inc
.data
	array DWORD 10,20,30,40

.code
main PROC
	mov ecx,-1
	mov ebx,LENGTHOF array

L1:
	inc ecx
	mov eax,[array+(ecx*(TYPE array))]
	XCHG eax,[array+(ebx*(TYPE array))]
	XCHG [array+(ecx*(TYPE array))],eax
	cmp ecx,ebx
	JNE L1

	mov ecx,0
	mov ebx,LENGTHOF array
L2:
	inc ecx
	mov eax,[array+(ecx*(TYPE array))]
	call WriteString
	call WriteDec
	cmp ecx,ebx
	JNE L2

	exit
main ENDP
END main